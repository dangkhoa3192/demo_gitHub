#include <stdio.h>
#define MAX_ELEMENTS 100
#define MAX_VERTICES 100
#define MAX_EDGES 500
typedef int ElementType;
typedef int Position;

typedef struct {
	ElementType data[MAX_ELEMENTS];
	Position size;
} List;

void make_null(List* L) {
	L->size = 0;
}

ElementType Retrieve(Position P, List L) {
	
	return L.data[P-1];
}

void push_back(List* L, ElementType x) {
	L->data[L->size] = x;
	L->size++;
}

void PrintList(List L) {
	Position P = 1;
	while(P != L.size+1) {
		printf("%d ", Retrieve(P, L));
		P += 1;
	}
	printf("\n");
}

typedef struct {
	int n, m;
	int A[MAX_VERTICES][MAX_EDGES];
} Graph;

void init_graph(Graph* G, int n, int m) {
	G->n = n; 
	G->m = m;
	for(int i = 1; i <= n; i++) 
		for(int j = 1; j < m; j++) 
			G->A[i][j] = 0;
}

void add_edge(Graph* G, int e, int x, int y) {
	G->A[x][e] = 1;
	G->A[y][e] = 1;
}

int adjacent(Graph* G, int x, int y) {
	for(int e = 1; e <= G->m; e++)
		if(G->A[x][e] == 1 && G->A[y][e] == 1)
			return 1;
	
	return 0;
}

List neighbors(Graph* G, int x) {
//	Graph G;
	List list;
	make_null(&list);
	for(int y = 1; y <= G->n; y++) 
		if(adjacent(G, x, y) == 1 && y != x) 
			push_back(&list, y);
	
	return list;
}

int main() {
	Graph G;
	int n, m, u, v, x, y, i, j;
	scanf("%d%d", &n, &m);
	init_graph(&G, n, m);
	for(i = 1; i <= m; i++) {
		scanf("%d%d", &u, &v);
		add_edge(&G, i, u, v);
	}
	scanf("%d%d", &x, &y);
	List list1, list2;
	List result;
	make_null(&list1);
	make_null(&list2);
	make_null(&result);
	list1 = neighbors(&G, x);
	list2 = neighbors(&G, y);
	
	for(i = 0; i < list1.size; i++) {
		for(j = 0; j < list2.size; j++) {
			if(list1.data[i] == list2.data[j]) {
				push_back(&result, list1.data[i]);
				break;
			}
		}
	}
	if(result.size == 0)
		printf("KHONG CHUNG DOI THU");
	else {
		PrintList(result);
	}
	
	return 0;
}